///////////////////////////////////////////////////////////
/// @file	result.h
/// @brief	Result
/// @author	henaiguo
/// Copyright (C) 2021- henaiguo All rights reserved.
///////////////////////////////////////////////////////////

#ifndef RESULT_H
#define RESULT_H

#include <common_library/types/e_result.h>

namespace common_library {
namespace types {
///////////////////////////////////////////////////////////
/// @class	Result
/// @brief	Result
/// @note
///////////////////////////////////////////////////////////
class Result
{
public:
	///////////////////////////////////////////////////////////
	/// @brief		Generate a result object (success)
	///////////////////////////////////////////////////////////
	static Result CreateSuccess();

	///////////////////////////////////////////////////////////
	/// @brief		Generate a result object (error occurred)
	/// @param[in]	_errorMessage Error message
	///////////////////////////////////////////////////////////
	static Result CreateError(const char *_errorMessage, ...);

	///////////////////////////////////////////////////////////
	/// @brief	Constructor
	/// @note	No error
	///////////////////////////////////////////////////////////
	Result();

	///////////////////////////////////////////////////////////
	/// @brief	Constructor
	/// @param[in]	_eResult eResult type
	/// @note
	///////////////////////////////////////////////////////////
	Result(common_library::types::eResult _eResult);

	///////////////////////////////////////////////////////////
	/// @brief	Constructor
	/// @param[in]	_eResult eResult type
	/// @param[in]	_errorMessage Error message
	/// @note
	///////////////////////////////////////////////////////////
	Result(common_library::types::eResult _eResult, const std::string& _errorMessage);

	///////////////////////////////////////////////////////////
	/// @brief	Copy constructor
	/// @param[in]	_result Result
	/// @note
	///////////////////////////////////////////////////////////
	Result(const Result& _result);

	///////////////////////////////////////////////////////////
	/// @brief	Destructor
	/// @note
	///////////////////////////////////////////////////////////
	virtual ~Result();

	///////////////////////////////////////////////////////////
	/// @brief	Set result
	/// @param[in]	_eResult eResult type
	/// @return None
	/// @note
	///////////////////////////////////////////////////////////
	void SetResult(common_library::types::eResult _eResult);

	///////////////////////////////////////////////////////////
	/// @brief	Get result
	/// @return common_library::types::eResult
	/// @note
	///////////////////////////////////////////////////////////
	common_library::types::eResult GetResult() const;

	///////////////////////////////////////////////////////////
	/// @brief	Set error message
	/// @param[in]	_errorMessage Error message
	/// @return None
	/// @note Empty parameter means clear error message
	///////////////////////////////////////////////////////////
	void SetErrorMessage(const std::string& _errorMessage);
	
	///////////////////////////////////////////////////////////
	/// @brief	Get error message
	/// @return	std::string
	/// @note
	///////////////////////////////////////////////////////////
	const std::string &GetErrorMessage() const;

	///////////////////////////////////////////////////////////
	/// @brief	Check if there is an error
	/// @note	True on success and false on error
	///////////////////////////////////////////////////////////
	operator bool() const;	

	///////////////////////////////////////////////////////////
	/// @brief	Success or not
	/// @return bool
	/// @note	True on success
	///////////////////////////////////////////////////////////
	bool IsSuccess() const;

	///////////////////////////////////////////////////////////
	/// @brief	Error or not
	/// @return bool
	/// @note	True on error
	///////////////////////////////////////////////////////////
	bool IsError() const;
	
	///////////////////////////////////////////////////////////
	/// @brief	Whether error message are set
	/// @return bool
	/// @note
	///////////////////////////////////////////////////////////
	bool HasErrorMessage() const;

	///////////////////////////////////////////////////////////
	/// @brief	Assignment operator
	/// @param[in]	_result Original result
	/// @note
	///////////////////////////////////////////////////////////
	Result& operator=(const Result& _result);

	///////////////////////////////////////////////////////////
	/// @brief	Assignment operator
	/// @param[in]	_result Original result
	/// @note
	///////////////////////////////////////////////////////////
	Result& operator=(const common_library::types::eResult& _eResult);

	///////////////////////////////////////////////////////////
	/// @brief		Comparison operator (equal to)
	/// @param[in]	_result Result type
	/// @return		bool
	/// @note
	///////////////////////////////////////////////////////////
	bool operator==(const Result& _result) const;

	///////////////////////////////////////////////////////////
	/// @brief		Comparison operator (not equal)
	/// @param[in]	_result Result type
	/// @return		bool
	/// @note
	///////////////////////////////////////////////////////////
	bool operator!=(const Result& _result) const;

	///////////////////////////////////////////////////////////
	/// @brief		Comparison operator (equal to)
	/// @param[in]	_eResult eResult type
	/// @return		bool
	/// @note		Compare only eResult type
	///////////////////////////////////////////////////////////
	bool operator==(common_library::types::eResult _eResult) const;

	///////////////////////////////////////////////////////////
	/// @brief		Comparison operator (not equal)
	/// @param[in]	_eResult eResult type
	/// @return		bool
	/// @note		Compare only eResult type
	///////////////////////////////////////////////////////////
	bool operator!=(common_library::types::eResult _eResult) const;

private:
	/// Result
	common_library::types::eResult m_eResult;

	/// Error message
	std::string m_errorMessage;

	/// Whether error message are set
	bool m_hasErrorMessage;
};

} // namespace types
} // namespace common_library

#endif // RESULT_H
