///////////////////////////////////////////////////////////
/// @file   mutex.h
/// @brief  Mutex
/// @author henaiguo
/// Copyright (C) 2021- henaiguo. All rights reserved.
///////////////////////////////////////////////////////////
#ifndef MUTEX_H
#define MUTEX_H

#include <common_library/types/elock_result.h>
#include <pthread.h>

namespace common_library {
namespace thread {
///////////////////////////////////////////////////////////
/// @class	Mutex
/// @brief  Mutex
/// @note
///////////////////////////////////////////////////////////
class Mutex
{
public:
    ///////////////////////////////////////////////////////////
    /// @brief  Default constructor
    /// @return None
    /// @note
    ///////////////////////////////////////////////////////////
    Mutex();

    ///////////////////////////////////////////////////////////
    /// @brief  Destructor
    /// @return None
    /// @note
    ///////////////////////////////////////////////////////////
    virtual ~Mutex();

	///////////////////////////////////////////////////////////	
    /// @brief	Acquire lock
	/// @return	common_library::types::eLockResult
	/// @note
	///////////////////////////////////////////////////////////
	common_library::types::eLockResult Lock();

	///////////////////////////////////////////////////////////	
    /// @brief	Acquire lock (with timeout)
	/// @param[in]	_usec Timeout (microsecond)
	/// @return	common_library::types::eLockResult
	/// @note
	///////////////////////////////////////////////////////////
	common_library::types::eLockResult Lock(unsigned long _usec);

	///////////////////////////////////////////////////////////
	/// @brief		Unlock
	/// @return		None
	/// @note
	///////////////////////////////////////////////////////////
	void Unlock();

protected:
    /// POSIX mutex
    ::pthread_mutex_t m_mutex;
};
} // namespace thread
} // namespace common_library

#endif // MUTEX_H
