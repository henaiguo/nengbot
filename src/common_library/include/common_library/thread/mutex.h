///////////////////////////////////////////////////////////
/// @file   mutex.h
/// @brief  Mutex
/// @author henaiguo
/// Copyright (C) 2021- henaiguo. All rights reserved.
///////////////////////////////////////////////////////////
#ifndef MUTEX_H
#define MUTEX_H

#include <common_library/types/elock_result.h>
#include <common_library/types/ewait_result.h>
#include <pthread.h>

namespace common_library {
namespace thread {
///////////////////////////////////////////////////////////
/// @class	Mutex
/// @brief	Mutex
/// @note
///////////////////////////////////////////////////////////
class Mutex
{
public:
	///////////////////////////////////////////////////////////
	/// @brief	Default constructor
	/// @return	None
	/// @note
	///////////////////////////////////////////////////////////
	Mutex();

	///////////////////////////////////////////////////////////
	/// @brief	Destructor
	/// @return	None
	/// @note
	///////////////////////////////////////////////////////////
	virtual ~Mutex();

	///////////////////////////////////////////////////////////	
	/// @brief	Acquire lock
	/// @return	common_library::types::eLockResult
	/// @note
	///////////////////////////////////////////////////////////
	common_library::types::eLockResult Lock();

	///////////////////////////////////////////////////////////	
	/// @brief	Acquire lock (with timeout)
	/// @param[in]	_usec Timeout (microsecond)
	/// @return	common_library::types::eLockResult
	/// @note
	///////////////////////////////////////////////////////////
	common_library::types::eLockResult Lock(unsigned long _usec);

	///////////////////////////////////////////////////////////
	/// @brief	Unlock
	/// @return	None
	/// @note
	///////////////////////////////////////////////////////////
	void Unlock();

	///////////////////////////////////////////////////////////
	/// @brief	Wait for condition (no timeout)
	/// @return	common_library::types::eWaitResult
	/// @note
	///////////////////////////////////////////////////////////
	common_library::types::eWaitResult Wait();

	///////////////////////////////////////////////////////////
	/// @brief	Wait for condition (with timeout)
	/// @param[in]	_usec Timeout (microsecond)
	/// @return	common_library::types::eWaitResult
	/// @note
	///////////////////////////////////////////////////////////
	common_library::types::eWaitResult Wait(unsigned long _usec);

	///////////////////////////////////////////////////////////
	/// @brief	Notify that the condition is met (wait release)
	/// @return	None
	/// @note
	///////////////////////////////////////////////////////////
	void Signal();

	///////////////////////////////////////////////////////////
	/// @brief	Notify that the condition is met (wait release)
	/// @return	None
	/// @note
	///////////////////////////////////////////////////////////
	void Broadcast();

private:
	/// POSIX mutex
	::pthread_mutex_t m_mutex;

	/// POSIX condition
	::pthread_cond_t m_condition;
};
} // namespace thread
} // namespace common_library

#endif // MUTEX_H
