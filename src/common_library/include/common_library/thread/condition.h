///////////////////////////////////////////////////////////
/// @file   condition.h
/// @brief  Condition
/// @author henaiguo
/// Copyright (C) 2021- henaiguo. All rights reserved.
///////////////////////////////////////////////////////////
#ifndef CONDITION_H
#define CONDITION_H

#include <common_library/types/elock_result.h>
#include <pthread.h>

namespace common_library {
namespace thread {
///////////////////////////////////////////////////////////
/// @class	Condition
/// @brief  Condition
/// @note
///////////////////////////////////////////////////////////
class Condition
{
public:
    ///////////////////////////////////////////////////////////
    /// @brief  Default constructor
    /// @return None
    /// @note
    ///////////////////////////////////////////////////////////
    Condition();

    ///////////////////////////////////////////////////////////
    /// @brief  Destructor
    /// @return None
    /// @note
    ///////////////////////////////////////////////////////////
    virtual ~Condition();

	///////////////////////////////////////////////////////////
	/// @brief	Wait for condition (no timeout)
	/// @return	bool
	/// @note
	///////////////////////////////////////////////////////////
	bool Wait();

	///////////////////////////////////////////////////////////
	/// @brief	    Wait for condition (with timeout)
	/// @param[in]	_usec Timeout (microsecond)
	/// @return		bool
	/// @note
	///////////////////////////////////////////////////////////
	bool Wait(unsigned long _usec);

	///////////////////////////////////////////////////////////
	/// @brief		Notify that the condition is met (wait release)
	/// @return		None
	/// @note
	///////////////////////////////////////////////////////////
	void Signal();

protected:
    /// POSIX condition
    ::pthread_cond_t m_condition;
};
} // namespace thread
} // namespace common_library

#endif // CONDITION_H
