///////////////////////////////////////////////////////////
/// @file	error.h
/// @brief	error
/// @author	henaiguo
/// Copyright (C) 2021- henaiguo All rights reserved.
///////////////////////////////////////////////////////////

#ifndef ERROR_H
#define ERROR_H

#include <string>

namespace common_library {
///////////////////////////////////////////////////////////
/// @class  Error
/// @brief	Error
/// @note
///////////////////////////////////////////////////////////
class Error
{
public:
	///////////////////////////////////////////////////////////
	/// @brief		Generate error object (error occurred)
	/// @param[in]	_format,... Error message
	///////////////////////////////////////////////////////////
    static Error CreateError(const char* _format, ...);

	///////////////////////////////////////////////////////////
	/// @brief		Generate an error object (no error)
	/// @param[in]	None
	///////////////////////////////////////////////////////////
	static Error CreateNoError();

    ///////////////////////////////////////////////////////////
	/// @brief		constructor
	/// @param[in]	None
	/// @note		No error
	///////////////////////////////////////////////////////////
	Error();

	///////////////////////////////////////////////////////////
	/// @brief		constructor
	/// @param[in]	_message Error message
	/// @note		Error occurred
	///////////////////////////////////////////////////////////
	Error(const std::string& _message);

	///////////////////////////////////////////////////////////
	/// @brief		Destructor
	/// @return		None
	///////////////////////////////////////////////////////////
	virtual ~Error();

	///////////////////////////////////////////////////////////
	/// @brief		Get message
	/// @param[in]	None
	/// @return		message
	///////////////////////////////////////////////////////////
	const std::string &Message() const;

    ///////////////////////////////////////////////////////////
	/// @brief		Check if there is an error
	/// @param[in]	None
	/// @note		True on error
	///////////////////////////////////////////////////////////
	operator bool() const;

	///////////////////////////////////////////////////////////
	/// @brief		Assignment operator
	/// @param[in]	_error Original error
	/// @return		Error&
	/// @note
	///////////////////////////////////////////////////////////
	Error& operator=(const Error& _error);

private:
    /// Error message
    std::string m_errorMessage;

    /// Is error or not
    bool m_isError;
};

} // namespace common_library

#endif // ERROR_H
